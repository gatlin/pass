#!/usr/bin/env perl

use v5.16;
use strict;
use warnings;
use EV;
use AnyEvent;
use AnyEvent::Redis;
use YAML qw(Load Dump LoadFile);
use Data::UUID;
use Data::Dump qw(pp);

my %pid_of; my %dispatch;
my $config = LoadFile("config");
$config->{host} //= "localhost";
$config->{port} //= 6379;
$config->{timeout} //= 100;

my $redis = AnyEvent::Redis->new(
    host => $config->{host},
    port => $config->{port},
    encoding => 'utf8',
    on_error => sub { warn @_ },
    on_cleanup => sub { warn "Connection closed: @_" },
);

open my $problemClassFile, "<", $ARGV[0]; my $class;
do { local $/; $class = <$problemClassFile>; };

%dispatch = (
    solve => sub {
        my %op = %{+shift};
        my ($id,$instance) = @op{qw(id instance)};
        chomp $instance;

        use File::Temp qw(tempfile);
        my ($fh,$filename) = tempfile;

        my $res = `clingo 100 $filename`;
        my @answers = ($res =~ m/Answer: \d+\n(.+)\n/g);
        $redis->lpush("$id:result" => Dump(\@answers), sub {});
    },

    test => sub {
        say "command ran";
        my %op = %{+shift};
        my ($id, $instance) = @op{qw(id instance)};
        chomp $instance;

        my @answers = (1..2);
        say "output printed to $id:result";
        $redis->lpush("$id:result" => Dump(\@answers));
    },
);

sub handle {
    my $result = shift;
    my $op = Load($result->[1]);
    say "received job: $op->{id}";
    $redis->rpush('jobkeys', $op->{id}, sub {});
    $dispatch{$op->{command}}->($op);
}

while (1) {
    my $cv = $redis->brpop('command',1000);
    my $res; eval {
        $res = $cv->recv;
        handle($res);
    };
    warn $@ if $@;
}
